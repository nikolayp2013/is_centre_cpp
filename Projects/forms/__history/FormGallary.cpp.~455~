//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "FormGallary.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "DBLookupListBoxCentre"
#pragma link "my_DBCtrls"
#pragma link "IBCustomDataSet"
#pragma link "IBQuery"
#pragma resource "*.dfm"
TFormGall *FormGall;
//extern TIBDatabase * MainConn;
//TIBTransaction * MainTransaction = NULL;
//extern TIBTransaction * MainTransaction;
TIBTransaction * OtherTransaction = NULL;
extern TIBTransaction * OtherTransaction;
TIBTransaction * PicsTransaction = NULL;
extern TIBTransaction * PicsTransaction;
// Главная таблица со списком объектов
TDataSource * TabPricelist_Datasource_Main;
extern TDataSource * TabPricelist_Datasource_Main;
//TIBDataSet * MainTableLocal = NULL;
//extern TIBDataSet * MainTableLocal;
TIBDataSet * MainTableLocal = NULL;
extern TIBDataSet * MainTableLocal;
//TDataSource * TabPricelist_Datasource_Main_local =NULL;
//extern TDataSource * TabPricelist_Datasource_Main_local;
TIBTable * Table_pics = NULL;
extern TIBTable * Table_pics;
TDataSource * Table_pics_Datasource=NULL;
extern TDataSource * Table_pics_Datasource;
Graphics::TBitmap* bmp1;
TIBQuery * IBQuery2 = NULL;
extern TIBQuery * IBQuery2;
//---------------------------------------------------------------------------
__fastcall TFormGall::TFormGall(TComponent* Owner)
	: TForm(Owner)
{
	OtherTransaction = new TIBTransaction(NULL);
	OtherTransaction->DefaultDatabase = MainForm->MainConn;

	PicsTransaction = new TIBTransaction(NULL);
	PicsTransaction->DefaultDatabase = MainForm->MainConn;

	//Создать объект табличку
	//MainTableLocal = MainTable;
	/*MainTableLocal = new TIBTable(NULL);
	MainTableLocal->Database=MainForm->MainConn;
	MainTableLocal->Transaction=OtherTransaction;
	MainTableLocal->TableName = "PRICELIST";
	MainTableLocal->Filter="ID="+MainForm->TabPricelist_Datasource_Main->DataSet->FieldByName("ID")->AsAnsiString;
	MainTableLocal->Filtered=TRUE;
	MainTableLocal->Active = TRUE; */
	//MainTableLocal->FetchAll();
	MainTableLocal = new TIBDataSet(NULL);
	MainTableLocal->Database=MainForm->MainConn;
	MainTableLocal->Transaction=OtherTransaction;
	MainTableLocal->SelectSQL->Append("select a.*,(select shortname from items where razdel=8 and code=a.region) as region_text,"
			"(select shortname from items where razdel=10 and code=a.mregion) as mregion_text, "
			"(select shortname from items where razdel=9 and code=a.typehouse) as typehouse_text, "
			"(select shortname from items where razdel=5 and code=a.nodesan) as nodesan_text, "
			"(select shortname from items where razdel=7 and code=a.swphone) as swphone_text, "
			"(select shortname from items where razdel=3 and code=a.variant) as variant_text, "
			"(select mainphone from people where id=a.idagent) as mainphone_text, "
			"(select advertname from people where id=a.idagent) as advertname_text, "
			"(select shortname from items where razdel=6 and code=a.stuffwall) as stuffwall_text "
			" from Apartsell a where guid = '"+MainForm->TabPricelist_Datasource_Main->DataSet->FieldByName("GUID")->AsString+"'");
	MainTableLocal->Active = TRUE;

	IBQuery2 = new TIBQuery(NULL);
	IBQuery2->Database = MainForm->MainConn;
	IBQuery2->Transaction = PicsTransaction;
	//IBQuery2->Params->CreateParam(ftBlob,"BlobsImage",ptInput);
	//IBQuery2->Params->CreateParam(ftInteger,"idparent",ptInput);
	//IBQuery2->Params->CreateParam(ftString,"remark",ptInput);
	//IBQuery2->Params->ParamByName("BlobsImage")->LoadFromFile(OpenPictureDialog1->FileName,ftBlob)

	//Создать объект табличку со списком картинок данного объекта
	Table_pics = new TIBTable(NULL);
	Table_pics->Database=MainForm->MainConn;
	Table_pics->Transaction=PicsTransaction;
	Table_pics->TableName = "TABLE_PICS";
	Table_pics->Filter="IDPRICE="+MainForm->TabPricelist_Datasource_Main->DataSet->FieldByName("ID")->AsAnsiString;
	Table_pics->Filtered=TRUE;
	Table_pics->Active = TRUE;
	Table_pics->FetchAll();

	Table_pics_Datasource = new TDataSource(NULL);
	Table_pics_Datasource->DataSet=Table_pics;

	this->DBMainGrid->DataSource= MainForm->TabPricelist_Datasource_Main;
	//this->DBImage1->DataSource = Table_pics_Datasource;
	//this->DBImage1->DataField = "PICS";

	//this->DBLookList_listimage->ListSource= Table_pics_Datasource;
	//this->DBLookList_listimage->ListField = "REMARK";
	//this->DBLookList_listimage->KeyField = "ID";

	//Цикл по всем записям таблицы
	 Table_pics_Datasource->DataSet->First();
	 do {
		Image_CheckListBox->Items->Add(Table_pics_Datasource->DataSet->FieldByName("REMARK")->AsString);
		Table_pics_Datasource->DataSet->Next();
	 } while(!Table_pics_Datasource->DataSet->Eof);
	 Table_pics_Datasource->DataSet->First();

	 if (!Table_pics_Datasource->DataSet->FieldByName("PICS")->IsNull){
		TJPEGImage *jpg = new TJPEGImage();
		try {
			jpg->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
			Image1->Picture->Assign(jpg);
		}
		catch(Exception *ex) {
			Image1->Picture->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
		}
		delete jpg;
	}
}
//---------------------------------------------------------------------------
void __fastcall TFormGall::But_addClick(TObject *Sender)
{
	// Добавить пустую строку в таблицу с картинками
	Table_pics_Datasource->DataSet->Append();
	Table_pics_Datasource->DataSet->FieldByName("ID")->Value = NULL;
	Table_pics_Datasource->DataSet->FieldByName("IDPRICE")->Value =
		MainForm->TabPricelist_Datasource_Main->DataSet->FieldByName("ID")->Value;
	Table_pics_Datasource->DataSet->FieldByName("IDPARENT")->AsString =
		MainForm->TabPricelist_Datasource_Main->DataSet->FieldByName("GUID")->AsString;
		//ShowMessage(MainForm->TabPricelist_Datasource_Main_local->DataSet->FieldByName("GUID")->AsString);
	// Выбрать картинку
	if (OpenPictureDialog1->Execute()){
		OpenPictureDialog1->FileName;
		if(OpenPictureDialog1->FileName.Length()>0)	{
			TMemoryStream *stm = new TMemoryStream();
			TJPEGImage *jpg = new TJPEGImage();
			TPicture *P = new TPicture;// Создаём объект изображения
			jpg->CompressionQuality = 75; // Процент сжатия
			jpg->Performance = jpBestQuality; // Установить наилучшее качество
			P->LoadFromFile(OpenPictureDialog1->FileName);
			jpg->Assign(P->Graphic);
			jpg->SaveToStream(stm);
			// Запрос на сжатие картинки
			AnsiString ds = "Файл слишком большой. Размер не должен превышать 75 кб \n\n Произвести сжатие файла?";
			if (stm->Size > 76800 && (MessageBox(NULL,ds.c_str(),"Подтверждение сжатия изображения",MB_YESNO | MB_TOPMOST | MB_ICONQUESTION)!=IDYES)) {
				  Abort();
			}
			// Добавить описание картинки
			FormGallaryAddRem = new TFormGallaryAddRem(FormGall,Table_pics_Datasource);
			FormGallaryAddRem->ShowModal();
			delete FormGallaryAddRem;

			//Требуется либо во время работы ПС либо во время создания создать параметр в IBQuery.
			IBQuery2->SQL->Clear();
			IBQuery2->Params->CreateParam(ftBlob,"BlobsImage",ptInput);
			IBQuery2->Params->CreateParam(ftInteger,"idparent",ptInput);
			IBQuery2->Params->CreateParam(ftString,"remark",ptInput);
			IBQuery2->Params->CreateParam(ftString,"guidpar",ptInput);

			IBQuery2->Params->ParamByName("idparent")->AsInteger=Table_pics_Datasource->DataSet->FieldByName("IDPRICE")->AsInteger;
			IBQuery2->Params->ParamByName("guidpar")->AsString=Table_pics_Datasource->DataSet->FieldByName("IDPARENT")->AsString;
			//--------- Определение размера полей и картинки
			int Length_st = Table_pics_Datasource->DataSet->FieldByName("REMARK")->AsString.Length();
			int Size_st = Table_pics_Datasource->DataSet->FieldByName("REMARK")->Size;
			char * tmpint = new char[17];

			// Уменьшить размер картинки
			Graphics::TBitmap *bmp = new Graphics::TBitmap;
			double scale;
			double newwidth;
			double newheight;
			newwidth = 640;
			while (stm->Size>76800){
				newheight = newwidth*jpg->Height/jpg->Width;
				bmp->Width = newwidth;
				bmp->Height = newheight;
				bmp->Canvas->StretchDraw(bmp->Canvas->ClipRect, jpg);
				jpg->Assign(bmp);
				stm->Clear();
				jpg->SaveToStream(stm);
				newwidth = newwidth - 50;
			}
			itoa(stm->Size/1024,tmpint,10);
			IBQuery2->Params->ParamByName("BlobsImage")->LoadFromStream(stm,ftBlob);
			// - - - -
			tmpint = strncat(tmpint," Кб",3);
			char *tmpstr = new char [700];
			tmpstr = strncpy(tmpstr,"\0\n",1);
			if (Table_pics_Datasource->DataSet->FieldByName("REMARK")->AsString.IsEmpty()) {
				 tmpstr = strncat(tmpstr," ",1);
			}else{
				 tmpstr = strncat(tmpstr,Table_pics_Datasource->DataSet->FieldByName("REMARK")->AsString.c_str(),Length_st);
			}
			while (strlen(tmpstr)<Size_st-strlen(tmpint))
			{
				tmpstr = strncat(tmpstr,".",1);
			}
			tmpstr = strncat(tmpstr,tmpint,strlen(tmpint));
			//---------
			IBQuery2->Params->ParamByName("remark")->AsString=UnicodeString(tmpstr);
			AnsiString s="INSERT INTO TABLE_PICS (IDPRICE,PICS,REMARK,IDPARENT) VALUES (:idparent,:BlobsImage,:remark,:guidpar)";
			IBQuery2->SQL->Add(s);
			IBQuery2->ExecSQL();//Запускаем наш скрипт
			IBQuery2->Close();
			IBQuery2->SQL->Clear();
			delete tmpstr;
			delete tmpint;
			delete stm;
			delete jpg;
			delete P;
			delete bmp;

		}
	}
	//Table_pics_Datasource->DataSet->CheckBrowseMode();
	PicsTransaction->CommitRetaining();
	Table_pics_Datasource->DataSet->Active=False;
	Table_pics->FetchAll();
	Table_pics_Datasource->DataSet->Active=True;
	//Цикл по всем записям таблицы
	Image_CheckListBox->Clear();
	 Table_pics_Datasource->DataSet->First();
	 do {
		Image_CheckListBox->Items->Add(Table_pics_Datasource->DataSet->FieldByName("REMARK")->AsString);
		Table_pics_Datasource->DataSet->Next();
	 } while(!Table_pics_Datasource->DataSet->Eof);
	 Table_pics_Datasource->DataSet->Last();

	 Image_CheckListBox->ItemIndex=Image_CheckListBox->Items->Count-1;

	 if (!Table_pics_Datasource->DataSet->FieldByName("PICS")->IsNull){
		TJPEGImage *jpg = new TJPEGImage();
		try {
			jpg->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
			Image1->Picture->Assign(jpg);
		}
		catch(Exception *ex) {
			Image1->Picture->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
		}
		delete jpg;
	}
}
//---------------------------------------------------------------------------

void __fastcall TFormGall::But_delClick(TObject *Sender)
{
	AnsiString ds = "Вы действительно хотите удалить (" + Table_pics_Datasource->DataSet->FieldByName("remark")->AsAnsiString + ")?";
	if (MessageBox(NULL,ds.c_str(),"Подтверждение удаления",MB_YESNO | MB_TOPMOST | MB_ICONQUESTION)!=IDYES){
		Abort();
	}
	Table_pics_Datasource->DataSet->Delete();
	//Фиксация изменений
	Table_pics_Datasource->DataSet->CheckBrowseMode();
	PicsTransaction->CommitRetaining();
	//Цикл по всем записям таблицы
	Image_CheckListBox->Clear();
	 Table_pics_Datasource->DataSet->First();
	 do {
		Image_CheckListBox->Items->Add(Table_pics_Datasource->DataSet->FieldByName("REMARK")->AsString);
		Table_pics_Datasource->DataSet->Next();
	 } while(!Table_pics_Datasource->DataSet->Eof);
	 Table_pics_Datasource->DataSet->First();

	 if (!Table_pics_Datasource->DataSet->FieldByName("PICS")->IsNull){
		TJPEGImage *jpg = new TJPEGImage();
		try {
			jpg->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
			Image1->Picture->Assign(jpg);
		}
		catch(Exception *ex) {
			Image1->Picture->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
		}
		delete jpg;
	}
}
//---------------------------------------------------------------------------

void __fastcall TFormGall::ListBox1DrawItem(TWinControl *Control, int Index, TRect &Rect,
          TOwnerDrawState State)
{
	((TListBox *) Control)->Canvas->FillRect(Rect);
	((TListBox *) Control)->Canvas->TextOut(Rect.Left + 20, Rect.Top,
	((TListBox *) Control)->Items->Strings[Index]);
}
//---------------------------------------------------------------------------


void __fastcall TFormGall::Image_CheckListBoxClick(TObject *Sender)
{
	Table_pics_Datasource->DataSet->First();
	Table_pics_Datasource->DataSet->MoveBy(Image_CheckListBox->ItemIndex);

	if (!Table_pics_Datasource->DataSet->FieldByName("PICS")->IsNull){
		TJPEGImage *jpg = new TJPEGImage();
		try {
			jpg->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
			Image1->Picture->Assign(jpg);
		}
		catch(Exception *ex) {
			Image1->Picture->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
		}
		delete jpg;
	}
}
//---------------------------------------------------------------------------

void __fastcall TFormGall::But_sendClick(TObject *Sender)
{
	/*for ( int i = 0; i < Image_CheckListBox->Items->Count; i++ ) {
		if (Image_CheckListBox->Checked[i]) {
			ShowMessage(Image_CheckListBox->Items->Strings[i]);
		}
	}
	//ShowMessage(AnsiString(TBlobField(Table_pics_Datasource->DataSet->FieldByName("PICS")).BlobSize));
	//ShowMessage(AnsiString(Table_pics_Datasource->DataSet->FieldByName("PICS")->DataSize));
	//TStream *blob;
	//blob = TStream.Create(TBlobField(Table_pics_Datasource->DataSet->FieldByName("PICS")), bmRead);
	//TStream *blob = Q->CreateBlobStream(Q->FieldList->Fields[i],bmRead);
	//blob->Size;
	TStream *blob = Table_pics_Datasource->DataSet->CreateBlobStream(Table_pics_Datasource->DataSet->FieldByName("PICS"),bmRead);
	ShowMessage(AnsiString(blob->Size/1024));
	delete blob; */
	Table_MySQL_Pics->Active=false;
	Table_MySQL_Pics->Filter = "idparent='"+MainForm->TabPricelist_Datasource_Main->DataSet->FieldByName("GUID")->AsString+"'";
	Table_MySQL_Pics->Filtered=true;
	Table_MySQL_Pics->Active=true;
	Table_pics->First();
	while (!Table_pics->Eof){
		Image_CheckListBox->ItemIndex=Table_pics->RecNo-1;
		if (Image_CheckListBox->Checked[Image_CheckListBox->ItemIndex]) {
			if (!Table_MySQL_Pics->Locate("GUID",Table_pics->FieldByName("GUID")->AsString.c_str(),TLocateOptions())) {
				Table_MySQL_Pics->Edit();
				Table_MySQL_Pics->Append();
			}
			Table_MySQL_Pics->Edit();
			Table_MySQL_Pics->FieldByName("ID")->AsString=Table_pics->FieldByName("ID")->AsString;
			Table_MySQL_Pics->FieldByName("IDPRICE")->AsString=Table_pics->FieldByName("IDPRICE")->AsString;
			Table_MySQL_Pics->FieldByName("GUID")->AsString=Table_pics->FieldByName("GUID")->AsString;
			Table_MySQL_Pics->FieldByName("IDPARENT")->AsString=Table_pics->FieldByName("IDPARENT")->AsString;
			Table_MySQL_Pics->FieldByName("PICS")->AsString=Table_pics->FieldByName("PICS")->AsString;
			Table_MySQL_Pics->FieldByName("REMARK")->AsString=Table_pics->FieldByName("REMARK")->AsString;
			Table_pics->Edit();
			Table_pics->FieldByName("SWSEND")->AsInteger=1;
		}
		Table_pics->Next();
	}
	Table_MySQL_Pics->ApplyUpdates(0);
	Table_pics->CheckBrowseMode();
	//Записать изменения в базу данных
	PicsTransaction->CommitRetaining();
}
//---------------------------------------------------------------------------
void __fastcall TFormGall::But_getClick(TObject *Sender)
{
/*double W,H;
AnsiString a  = GetCurrentDir();// Так-как в дальнейшем путь изменится сохраним его
if(OpenPictureDialog1->Execute())// Выбираем картинку
  {
   TRect rect,rim;
   //Stream *stream = new TStream(1024);
   TMemoryStream *stm = new TMemoryStream();
   TPicture *P = new TPicture;// Создаём объект изображения
   TJPEGImage *jpg = new TJPEGImage();// Создаём Объект файла .jpg
   TImage *img  = new TImage(Application);// Создаём образ картинки
	P->LoadFromFile(OpenPictureDialog1->FileName);// Загружаем картинку
    // Левый верхний угол картинки
    rect.Left = 0;
    rect.Top = 0;
    // Правый нижний угол картинки
    W = P->Width;
    H = P->Height;
    if(W > H)// Ширина больше высоты
      {
	  rect.Bottom = H / W * 540;
	  rect.Right = 540;
	  }
    else     // Ширина меньше высоты
      {
	  rect.Right = W / H * 405;
	  rect.Bottom = 405;
      }
    // Это, если нужно выводить на экран, картинку меньшего размера чем в файл
    rim = rect;
    rim.Bottom /= 2;
    rim.Right /= 2;
	// Отображение высоты и ширины картинки в файле
	//Label1->Caption = "Высота картинки - " + IntToStr(rect.Bottom);
	//Label2->Caption = "Ширина картинки - " + IntToStr(rect.Right);
	// Задаём Размеры картинки для файла
    img->Width = rect.Right;
	img->Height = rect.Bottom;

//bitmap->PixelFormat = pf24bit;

	img->Canvas->StretchDraw(rect,P->Graphic);// Копируем с необходимыми размерами
	//img->Picture->
	img->Picture->SaveToFile("image1.bmp");
	jpg->Assign(img->Picture->Bitmap);// Переводим в jpg
	jpg->CompressionQuality = 55;// Задаём качество (от 1 до 100)
	//jpg->PixelFormat = pf24bit;
	jpg->Compress();              // Сжимаем
	jpg->SaveToStream(stm);
	//jpg->
	//TStream *stream = jpg->

	//stream->
	//ShowMessage(stm->Size);
	//ShowMessage(jpg->InstanceSize());
	jpg->SaveToFile("image.jpg"); // записываем
	Image1->Width = rim.Right;    // Задаём размер компонента Image
	Image1->Height = rim.Bottom;
	//Image1->Canvas->StretchDraw(rim,img->Picture->Bitmap);// Выводим на экран
	Image1->Picture->Bitmap=img->Picture->Bitmap;// Выводим на экран
	//Image1->Picture->Graphic->
	//Image1->O
  delete img;// Уничтожаем объекты
  delete jpg;
  delete P;
  }
SetCurrentDir(a);// Восстановим путь */
	//Загрузка фотографий с сервера
    Table_MySQL_Pics->Active=false;
	Table_MySQL_Pics->Filter = "idparent='"+MainForm->TabPricelist_Datasource_Main->DataSet->FieldByName("GUID")->AsString+"'";
	Table_MySQL_Pics->Filtered=true;
	Table_MySQL_Pics->Active=true;
	Table_MySQL_Pics->First();
	while (!Table_MySQL_Pics->Eof){
		if (!Table_pics->Locate("GUID",Table_MySQL_Pics->FieldByName("GUID")->AsString.c_str(),TLocateOptions())) {
			Table_pics->Edit();
			Table_pics->Append();
		}
		Table_pics->Edit();
		Table_pics->FieldByName("ID")->AsString=Table_MySQL_Pics->FieldByName("ID")->AsString;
		Table_pics->FieldByName("IDPRICE")->AsString=Table_MySQL_Pics->FieldByName("IDPRICE")->AsString;
		Table_pics->FieldByName("IDPARENT")->AsString=Table_MySQL_Pics->FieldByName("IDPARENT")->AsString;
		Table_pics->FieldByName("GUID")->AsString=Table_MySQL_Pics->FieldByName("GUID")->AsString;
		Table_pics->FieldByName("REMARK")->AsString=Table_MySQL_Pics->FieldByName("REMARK")->AsString;
		Table_pics->FieldByName("PICS")->AsString=Table_MySQL_Pics->FieldByName("PICS")->AsString;
		Table_MySQL_Pics->Next();
	}
	Table_pics->CheckBrowseMode();
	//Записать изменения в базу данных
	PicsTransaction->CommitRetaining();
	Table_pics->First();
	if (!Table_pics_Datasource->DataSet->FieldByName("PICS")->IsNull){
		TJPEGImage *jpg = new TJPEGImage();
		try {
			jpg->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
			Image1->Picture->Assign(jpg);
		}
		catch(Exception *ex) {
			Image1->Picture->Assign(Table_pics_Datasource->DataSet->FieldByName("PICS"));
		}
		delete jpg;
	}
}
//---------------------------------------------------------------------------

void __fastcall TFormGall::FormResize(TObject *Sender)
{
	//ShowMessage(DBMainGrid->ClientWidth);
	//DBMainGrid->Columns->Items[1]->Field->
	TColumn *Column = DBMainGrid->Columns->Items[0];
	Column->Width=40;
	Column = DBMainGrid->Columns->Items[1];
	Column->Width=61;
	Column = DBMainGrid->Columns->Items[2];
	Column->Width=38;
	Column = DBMainGrid->Columns->Items[3];
	Column->Width=44;
	Column = DBMainGrid->Columns->Items[4];
	Column->Width=31;
	Column = DBMainGrid->Columns->Items[5];
	Column->Width=224;
	Column = DBMainGrid->Columns->Items[6];
	Column->Width=29;
	Column = DBMainGrid->Columns->Items[7];
	Column->Width=24;
	Column = DBMainGrid->Columns->Items[8];
	Column->Width=64;
	Column = DBMainGrid->Columns->Items[9];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[10];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[11];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[12];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[13];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[14];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[15];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[16];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[17];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[18];
	Column->Width=50;
	Column = DBMainGrid->Columns->Items[19];
	Column->Width=64;

}
//---------------------------------------------------------------------------

